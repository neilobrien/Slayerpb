syntax = "proto3";

package configfetcher;
option go_package="configfetcherpb";


message Probe {
  string name = 1;
  int32 probeID = 2;
  int32 ipVer = 3;
  string probeType = 4;
  string targetAddress = 5;
  int32 numPackets = 6;
  int32 interval = 7;
}

// Config Requests and Replies
message ConfigRequest {
  string deviceName = 1;
}

message ConfigResponse {
  int32 version = 1;
  repeated Probe probes =2;
}

message ConfigVersionResponse {
  int32 version = 1;
}

// Results from Host
message PingResponse {
  string host = 1;
	string Addr = 2;
	int64 Port = 3;
	int64 Rtt = 4;
	string err  = 5;
}

message UDPResponse {
  string node = 1;
	string type = 2;
	string target = 3;
	string addr = 4;
	int64 pktssent  = 5;
	int64 pktsrcvd  = 6;
	double loss  = 7;
  string direction  = 8;
  string err  = 9;
}

message ReceivedAck {
  bool received = 1;
}

message Empty {
}

message PktCounter {
    int32 counter = 1;
}

service ConfigService{
  rpc GetConfig(ConfigRequest) returns (ConfigResponse) {};
  rpc GetConfigVersion(ConfigRequest) returns (ConfigVersionResponse) {};
}

service PingService{
  rpc ReadyToReceive(Empty) returns (Empty){};
  rpc GetPacketCounter(Empty) returns (PktCounter){};
}

service DBService{
  rpc GetUDPResponse(UDPResponse) returns (ReceivedAck) {};
  rpc GetPingResponse(PingResponse) returns (ReceivedAck) {};
}
